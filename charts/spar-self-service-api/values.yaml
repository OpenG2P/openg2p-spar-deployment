global:
  hostname: spar.openg2p.sandbox.net

replicaCount: 1
image:
  repository: openg2p/openg2p-spar-self-service-api
  pullPolicy: Always
  tag: "develop"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

envVars:
  SPAR_SELFSERVICE_DB_HOSTNAME: '{{ include "postgresql.v1.primary.fullname" .Subcharts.postgresql }}'
  SPAR_SELFSERVICE_DB_USERNAME: "sparuser"
  SPAR_SELFSERVICE_DB_DBNAME: "spardb"
  SPAR_SELFSERVICE_OPENAPI_ROOT_PATH: "/selfservice/api"
  SPAR_SELFSERVICE_DEFAULT_ID_TOKEN_VERIFY_AT_HASH: "false"

  SPAR_SELFSERVICE_AUTH_DEFAULT_ISSUERS: '["https://esignet.openg2p.sandbox.net/v1/esignet","https://keycloak.openg2p.sandbox.net/realms/openg2p"]'
  SPAR_SELFSERVICE_AUTH_DEFAULT_JWKS_URLS: '["https://esignet.openg2p.sandbox.net/v1/esignet/oauth/.well-known/jwks.json","https://keycloak.openg2p.sandbox.net/realms/openg2p/protocol/openid-connect/certs"]'

  SPAR_SELFSERVICE_MAPPER_API_URL: 'http://mapper/mapper/sync'

envVarsFrom:
  SPAR_SELFSERVICE_DB_PASSWORD:
    secretKeyRef:
      name: '{{ include "postgresql.v1.primary.fullname" .Subcharts.postgresql }}'
      key: password

containerPort: 8000

service:
  type: ClusterIP
  port: 80

resources: {}
  #  requests:
  #    cpu: 500m
  #    memory: 2G

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 1
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

readinessProbe:
  httpGet:
    path: /ping
    port: 8000
  failureThreshold: 20
  periodSeconds: 30
  timeoutSeconds: 10
  initialDelaySeconds: 30

livenessProbe:
  httpGet:
    path: /ping
    port: 8000
  initialDelaySeconds: 15
  periodSeconds: 60
  failureThreshold: 5

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

nodeSelector: {}

tolerations: []

affinity: {}

updateStrategy:
  type: RollingUpdate

command: []
args: []

postgresCheckerInit:
  enabled: true
  image: jbergknoff/postgresql-client
  command:
  - 'sh'
  - '-c'
  - 'until pg_isready -U ${SPAR_SELFSERVICE_DB_USERNAME} -h ${SPAR_SELFSERVICE_DB_HOSTNAME} -p ${SPAR_SELFSERVICE_DB_PORT:-5432} -d ${SPAR_SELFSERVICE_DB_DBNAME:-spar_db}; do sleep 3; done'

ingress:
  enabled: false
  className: ""
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: ""
      paths:
        - path: /selfservice/api(/|$)(.*)
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

istio:
  enabled: true
  virtualservice:
    enabled: true
    host: ""
    gateway: "istio-system/all-hosts"
    prefix: "/selfservice/api/"
    rewriteUri: "/"
  gateway:
    enabled: false
    host: ""
    ingressController:
      istio: ingressgateway
    httpTlsRedirect: true
    tls:
      enabled: true
      mode: SIMPLE
      credentialName: ""

postgresql:
  enabled: true
  auth:
    username: sparuser
    database: spardb
  primary:
    extendedConfiguration: |-
      wal_level = logical
      max_wal_senders = 20
      max_replication_slots = 10
